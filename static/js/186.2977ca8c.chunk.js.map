{"version":3,"file":"static/js/186.2977ca8c.chunk.js","mappings":"yOAqDA,UAhDA,WACE,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SACFE,EAAO,gBAAYF,EAAZ,YAyBb,OAvBAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,IAAIC,gBAEtBC,EAAS,mCAAG,2FAChBP,GAAa,GADG,mBAGYQ,EAAAA,EAAAA,GAAYL,EAASE,EAAgBI,QAHjD,OAGRC,EAHQ,OAIdZ,EAAUY,EAAYC,SAJR,gDAMI,iBAAf,KAAMC,MACPC,QAAQC,IAAI,KAAMC,SAPN,yBAUdf,GAAa,GAVC,4EAAH,qDAef,OADAO,IACO,WACLF,EAAgBW,OACjB,CACF,GAAE,CAACb,KAGF,gCACGJ,IAAa,SAAC,IAAD,KACd,+BACqB,IAAlBF,EAAOoB,SAAgB,uBAAG,6CAC1BpB,GACCA,EAAOqB,KAAI,SAAAC,GACT,OACE,2BACE,0BAAI,WAASA,EAAKC,WAClB,wBAAKD,EAAKE,YAFHF,EAAKG,GAKjB,SAIV,C,gFCjDYC,E,QAAkBC,EAAAA,IAAH,oK,SCCrB,SAASC,IACd,OACE,SAACF,EAAD,WACI,SAAC,KAAD,CACEG,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,kBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,KAKlB,C,kGChBKC,EAAU,mCAGT,SAAezB,EAAtB,iDAAO,OAAP,oBAAO,WAA2BL,EAASM,GAApC,wFAA4CyB,EAA5C,+BAAoD,GACpD/B,EADA,kEAKgBgC,EAAAA,EAAAA,GAAM,IAAD,OAAKhC,EAAL,oBAAwB8B,EAAxB,kBAAyCC,GAAS,CAC1EzB,OAAAA,IANG,cAKC2B,EALD,yBAQEA,EAAOC,MART,mEAFPF,EAAAA,EAAAA,SAAAA,QAAyB,8B","sources":["components/Reviews/Reviews.jsx","components/Spinner/Spinner.styled.jsx","components/Spinner/Spinner.jsx","service/api-themoviedb.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovies } from 'service/api-themoviedb';\nimport { Spinner } from 'components/Spinner/Spinner';\n\nfunction Reviews() {\n  const [review, setReview] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { moviesId } = useParams();\n  const request = `movie/${moviesId}/reviews`;\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const reviewMovie = await fetchMovies(request, abortController.signal);\n        setReview(reviewMovie.results);\n      } catch (error) {\n        if(error.code !== 'ERR_CANCELED') {\n          console.log(error.message); \n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n    return () => {\n      abortController.abort();\n    };\n  }, [request]);\n\n  return (\n    <>\n      {isLoading && <Spinner />}\n      <section>\n        {review.length === 0 && <p>We don`t have any reviews for this movie</p>}\n        {review &&\n          review.map(item => {\n            return (\n              <ul key={item.id}>\n                <li>Author: {item.author}</li>\n                <li>{item.content}</li>\n              </ul>\n            );\n          })}\n      </section>\n    </>\n  );\n}\n\nexport default Reviews;","import styled from \"@emotion/styled\";\n\nexport const StyledContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`","import { Circles } from  'react-loader-spinner'\nimport { StyledContainer } from './Spinner.styled';\n\nexport function Spinner(){\n  return (\n    <StyledContainer>\n        <Circles\n          height=\"60\"\n          width=\"60\"\n          color=\"#3f51b5\"\n          ariaLabel=\"circles-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n        />\n    </StyledContainer>\n\n    )\n};\n","import axios from 'axios';\n\nconst API_KEY = '203c8efd66ec76470e0f4b5662bc1dde';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function fetchMovies(request, signal, query = '') {\n  if (!request) {\n    return;\n  }\n\n  const result = await axios(`/${request}?api_key=${API_KEY}&query=${query}`, {\n    signal,\n  });\n  return result.data;\n};\n\n"],"names":["useState","review","setReview","isLoading","setIsLoading","moviesId","useParams","request","useEffect","abortController","AbortController","fetchData","fetchMovies","signal","reviewMovie","results","code","console","log","message","abort","length","map","item","author","content","id","StyledContainer","styled","Spinner","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","API_KEY","query","axios","result","data"],"sourceRoot":""}